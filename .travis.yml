# ℹ️ Project CI/CD: Basic install and test flow with no deployments

language: node_js
node_js:
  - '10'

# Skip building branches except for master for automated releases
branches:
  only:
    - master

# All dependencies are managed in Docker container
install: true

# Setup Code Climate test reporter
before_script:
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build

# Test workflow builds and runs a container to create app production bundle
# which is then used within Docker Compose to run Cypress acceptance tests.
script:
  # Building the app image will install dependencies then lint and unit test so
  # that image is ready to build app bundle when run
  - docker build -t crystal-ball/react-application-prototype .
  # Copy code coverage report into Travis workspace for Code Climate test
  # coverage reporting
  - docker run --rm -v $(pwd)/coverage:/tmp crystal-ball/react-application-prototype cp -a /usr/src/app/coverage/. /tmp/
  # With Docker Compose use Nginx+built assets and Cypress to acceptance test
  - docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --exit-code-from cypress --abort-on-container-exit

# Call Code Climate reporter with results, note the --prefix option is used to
# strip the file paths output from the Docker container
after_script:
  - ./cc-test-reporter after-build --prefix /usr/src/app --exit-code $TRAVIS_TEST_RESULT

# ☎️ Slack
notifications:
  slack:
    on_success: change
    on_failure: always
    rooms:
      secure: EtTFMR+ZU093RYTsNpc5sTCKSQEJIGZLbY/pXi/bIT+7d0slhw1N9B3u9W3iM0HaCWQAh2xnXJVbGOyAT3j6qVpxqhKuPxLIS/3n43zZFqAUaL6QGiUs3Oxdbg2l65I4lJ8a8mLFGQzg+fKjpF4Oh2Rmd1Ih3AJId6zGYhH1D0BUMm81Gcc4nOOnm9uKfZWvHVTKVLqk0Bgpl5W2iVdjLruUi+218oM4081b/S3z4hP+Ref3zAjxyGDnBaucRZQvfLKtRCSTIKc11bZqtPJTka6Jgyu8TwyBBVyJzXG+bC98gccdK8LBdTMvPBH1DiE7yfOA53Kd8LEbGl3fUdsoVi+RTP15UFo8/a8zirE0EEEIGA6JsPGQOSqgwwWzR1pQjiAVMTYvyrbi4Hn8PKXwRdlDm2+ciKvxcwLS2hFOyEIwoKG49nKtel7j3tn2uR6oqnth1gtF5h6s/6eq3vcLeCaVsM+I/e4gvzSzGD7DGj7EdaMJIS8IcDwc6vAsrgSaoAFu7stw8iAKO5MPt9Bu086j11IQmZoe5ZnHPIMFkhmZirzUbjeMJP8fQSzux6/qkae3bVonDbvXYWUSuN1YUJJ3xR51G1UXSDQm8xhg5PWHr2SNsrZ+FGbPxBUY/p8vJ9CU7wUUj2HbLb4eozRDH86KNF4nV9qZvj7MGrWqRvQ=
