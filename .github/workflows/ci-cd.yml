name: CI/CD

# Run action on all PRS and on change to master branch in order to test PRs for
# continuous integration
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  test:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      # - name: Code Climate - Setup
      #   run: |
      #     curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      #     chmod +x ./cc-test-reporter
      #     ./cc-test-reporter before-build
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Test
        run: |
          # export BRANCH_COMMIT_SHA=$(git rev-parse HEAD^2)
          # export COMMIT_ONE=$(git rev-parse HEAD^1)
          # export COMMIT_TWO=$(git rev-parse HEAD^2)
          # echo "$COMMIT_TWO"
          # export BRANCH_COMMIT_SHA=$(git rev-parse HEAD)
          # echo "$BRANCH_COMMIT_SHA"
          # Set current git info as env variables for Cypress
          # export COMMIT_INFO_EMAIL=$(git show $BRANCH_COMMIT_SHA -s --pretty=%ae)
          # export COMMIT_INFO_AUTHOR=$(git show $BRANCH_COMMIT_SHA -s --pretty=%an)
          # export COMMIT_INFO_BRANCH=$(git branch --contains $BRANCH_COMMIT_SHA)
          # export COMMIT_INFO_SHA=$BRANCH_COMMIT_SHA

          # echo "BRANCH_COMMIT_SHA: $BRANCH_COMMIT_SHA"
          export COMMIT_INFO_MESSAGE=$(git show $COMMIT_INFO_SHA -s --pretty=%B)
          echo "COMMIT_INFO_SHA: $COMMIT_INFO_SHA"
          echo "COMMIT_INFO_MESSAGE: $COMMIT_INFO_MESSAGE"
          echo "COMMIT_INFO_BRANCH: $COMMIT_INFO_BRANCH"
          # export COMMIT_INFO_REMOTE=$(git config --get remote.origin.url)
          # Building the app image will install dependencies then lint and unit test so
          # that image is ready to build app bundle when run
          # docker build -t crystal-ball/react-application-prototype .
          # Copy code coverage report into Travis workspace for Code Climate test
          # coverage reporting
          # docker run --rm -v $(pwd)/coverage:/tmp crystal-ball/react-application-prototype cp -a /usr/src/app/coverage/. /tmp/
          # With Docker Compose use Nginx+built assets and Cypress to acceptance test
          # docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --exit-code-from cypress --abort-on-container-exit
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          COMMIT_INFO_BRANCH: ${{ github.head_ref }}
          COMMIT_INFO_SHA: ${{ github.head.sha }}
      # - name: Code Climate - Report
      #   if: success()
      #   run: ./cc-test-reporter after-build --prefix /usr/src/app
      #   env:
      #     CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
